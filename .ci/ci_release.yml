name: $(BuildDefinitionName)-$(date:yyMM).$(date:dd)$(rev:rrr)
trigger:
  # Batch merge builds together while a merge build is running
  batch: true
  branches:
    include:
    - master
pr:
  branches:
    include:
    - master

variables:
  - group: ESRP

resources:
  repositories:
  - repository: ComplianceRepo
    type: github
    endpoint: ComplianceGHRepo
    name: PowerShell/compliance

stages:
- stage: Build
  displayName: Build SecretManagement Module Package
  jobs:
  - job: BuildPkg
    displayName: Build Package
    pool:
      name: 1ES
      demands:
      - ImageOverride -equals MMS2019

    steps:
    - pwsh: |
        Get-ChildItem -Path env:
      displayName: Capture environment for build
      condition: succeededOrFailed()

    - pwsh: |
        $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
        if (Test-Path -Path $modulePath) {
          Write-Verbose -Verbose "Deleting existing temp module path: $modulePath"
          Remove-Item -Path $modulePath -Recurse -Force -ErrorAction Ignore
        }
        if (! (Test-Path -Path $modulePath)) {
          Write-Verbose -Verbose "Creating new temp module path: $modulePath"
          $null = New-Item -Path $modulePath -ItemType Directory
        }
      displayName: Create temporary module path

    - pwsh: |
        $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
        Write-Verbose -Verbose "Install PowerShellGet V3 to temp module path"
        Save-Module -Name PowerShellGet -Path $modulePath -MinimumVersion 3.0.0-beta10 -AllowPrerelease -Force
        Write-Verbose -Verbose "Install PlatyPS to temp module path"
        Save-Module -Name "platyPS" -Path $modulePath -Force
        Write-Verbose -Verbose "Install PSScriptAnalyzer to temp module path"
        Save-Module -Name "PSScriptAnalyzer" -Path $modulePath -RequiredVersion 1.18.0 -Force
        Write-Verbose -Verbose "Install Pester 4.X to temp module path"
        Save-Module -Name "Pester" -MaximumVersion 4.99 -Path $modulePath -Force
        Write-Verbose -Verbose "Install PSPackageProject to temp module path"
        Save-Module -Name PSPackageProject -Path $modulePath -Force
      displayName: Install PSPackageProject and dependencies

    - pwsh: |
        $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
        $env:PSModulePath = $modulePath + [System.IO.Path]::PathSeparator + $env:PSModulePath
        $modPath = Join-Path -Path $modulePath -ChildPath PSPackageProject
        Write-Verbose -Verbose "Importing PSPackageProject from: $modPath"
        Import-Module -Name $modPath -Force
        #
        $(Build.SourcesDirectory)/build.ps1 -Build -Clean -BuildConfiguration Release
      displayName: Build and publish artifact

    - pwsh: |
        $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
        $env:PSModulePath = $modulePath + [System.IO.Path]::PathSeparator + $env:PSModulePath
        $modPath = Join-Path -Path $modulePath -ChildPath PSPackageProject
        Write-Verbose -Verbose "Importing PSPackageProject from: $modPath"
        Import-Module -Name $modPath -Force
        #
        $config = Get-PSPackageProjectConfiguration
        $signSrcPath = "$($config.BuildOutputPath)\$($config.ModuleName)"
        $signOutPath = "$($config.SignedOutputPath)\$($config.ModuleName)"
        if (! (Test-Path -Path $signOutPath)) {
          $null = New-Item -Path $signOutPath -ItemType Directory
        }
        
        # Set signing src path variable
        $vstsCommandString = "vso[task.setvariable variable=signSrcPath]${signSrcPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"

        # Set signing out path variable
        $vstsCommandString = "vso[task.setvariable variable=signOutPath]${signOutPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
      displayName: Set signing path variables for possible module code signing

    - pwsh: |
        Get-ChildItem -Path env:
      displayName: Capture environment for module code signing
      condition: and(and(succeeded(), eq(variables['Build.Reason'], 'Manual')), ne(variables['SkipSigning'], 'True'))

    - template: EsrpSign.yml@ComplianceRepo
      parameters:
        buildOutputPath: $(signSrcPath)
        signOutputPath: $(signOutPath)
        certificateId: "CP-230012"
        pattern: |
          *.dll
          *.psd1
          *.ps1xml
        useMinimatch: true

    - pwsh: |
        $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
        $env:PSModulePath = $modulePath + [System.IO.Path]::PathSeparator + $env:PSModulePath
        $modPath = Join-Path -Path $modulePath -ChildPath PSPackageProject
        Write-Verbose -Verbose "Importing PSPackageProject from: $modPath"
        Import-Module -Name $modPath -Force
        #
        if ($env:SkipSigning -eq 'True')
        {
          $(Build.SourcesDirectory)/build.ps1 -Publish
        }
        else
        {
          $(Build.SourcesDirectory)/build.ps1 -Publish -Signed
        }
      displayName: Create module artifact

    - pwsh: |
#        $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
#        $env:PSModulePath = $modulePath + [System.IO.Path]::PathSeparator + $env:PSModulePath
#        $modPath = Join-Path -Path $modulePath -ChildPath PSPackageProject
#        Write-Verbose -Verbose "Importing PSPackageProject from: $modPath"
#        Import-Module -Name $modPath -Force
#        #
#        $config = Get-PSPackageProjectConfiguration
#        $signSrcPath = Resolve-Path -Path "$($config.BuildOutputPath)"
#        $signOutPath = "$($config.SignedOutputPath)\RefAssemblyNuGet"
#        if (! (Test-Path -Path $signOutPath)) {
#          $null = New-Item -Path $signOutPath -ItemType Directory
#        }
#        # Set signing src path variable
#        $vstsCommandString = "vso[task.setvariable variable=signSrcPath]${signSrcPath}"
#        Write-Host "sending " + $vstsCommandString
#        Write-Host "##$vstsCommandString"
#        # Set signing out path variable
#        $vstsCommandString = "vso[task.setvariable variable=signOutPath]${signOutPath}"
#        Write-Host "sending " + $vstsCommandString
#        Write-Host "##$vstsCommandString"
#      displayName: Set signing variables for possible ref assembly nuget package signing

#    - pwsh: |
#        Get-ChildItem -Path env:
#      displayName: Capture environment for ref assembly nuget file signing
#      condition: and(and(succeeded(), eq(variables['Build.Reason'], 'Manual')), ne(variables['SkipSigning'], 'True'))

#    - template: EsrpSign.yml@ComplianceRepo
#      parameters:
#        buildOutputPath: $(signSrcPath)
#        signOutputPath: $(signOutPath)
#        certificateId: "CP-401405"
#        pattern: | 
#          *.nupkg
#        useMinimatch: true

    - pwsh: |
        $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
        $env:PSModulePath = $modulePath + [System.IO.Path]::PathSeparator + $env:PSModulePath
        $modPath = Join-Path -Path $modulePath -ChildPath PSPackageProject
        Write-Verbose -Verbose "Importing PSPackageProject from: $modPath"
        Import-Module -Name $modPath -Force
        #
        $config = Get-PSPackageProjectConfiguration
        if ($env:SkipSigning -eq 'True')
        {
          $srcModulePath = Resolve-Path -Path "$($config.BuildOutputPath)/$($config.ModuleName)"
          # $refAssemblyNuGetPath = Resolve-Path -Path "$($config.BuildOutputPath)/Microsoft.PowerShell.SecretManagement.Library*.nupkg"
        }
        else
        {
          $srcModulePath = Resolve-Path -Path "$($config.SignedOutputPath)/$($config.ModuleName)"
          # $refAssemblyNuGetPath = Resolve-Path -Path "$($config.SignedOutputPath)/RefAssemblyNuGet/Microsoft.PowerShell.SecretManagement.Library*.nupkg"
        }
        Get-ChildItem $srcModulePath
        # Get-ChildItem $refAssemblyNuGetPath
        $artifactName = "$($config.ModuleName)"
        Write-Host "##vso[artifact.upload containerfolder=$artifactName;artifactname=$artifactName;]$srcModulePath"
        # $artifactName = "RefAssemblyNuGet"
        # Write-Host "##vso[artifact.upload containerfolder=$artifactName;artifactname=$artifactName;]$refAssemblyNuGetPath"
      displayName: Create and upload the module and ref assembly NuGet package artifacts

- stage: Compliance
  displayName: Compliance
  dependsOn: Build
  jobs:
  - job: ComplianceJob
    pool:
      name: 1ES
      demands:
      - ImageOverride -equals MMS2019
    steps:
    - checkout: self
      clean: true
    - checkout: ComplianceRepo
      clean: true
    - download: current
      artifact: 'Microsoft.PowerShell.SecretManagement'
    - template: assembly-module-compliance.yml@ComplianceRepo
      parameters:
        # binskim
        AnalyzeTarget: '$(Pipeline.Workspace)/Microsoft.PowerShell.SecretManagement/*.dll'
        AnalyzeSymPath: 'SRV*'
        # component-governance
        sourceScanPath: '$(Build.SourcesDirectory)'
        # credscan
        suppressionsFile: ''
        # TermCheck
        optionsRulesDBPath: ''
        optionsFTPath: ''
        # tsa-upload
        codeBaseName: 'PSSecretsManagement_202001'
        # selections
        APIScan: false # set to false when not using Windows APIs

- stage: Test
  displayName: Test Package
  dependsOn: Build
  jobs:
  - template: test.yml
    parameters:
      jobName: TestPkgWin
      displayName: PowerShell Core on Windows
      imageName: windows-latest

  - template: test.yml
    parameters:
      jobName: TestPkgWinPS
      displayName: Windows PowerShell on Windows
      imageName: windows-latest
      powershellExecutable: powershell

  - template: test.yml
    parameters:
      jobName: TestPkgUbuntu16
      displayName: PowerShell Core on Ubuntu
      imageName: ubuntu-latest

  - template: test.yml
    parameters:
      jobName: TestPkgWinMacOS
      displayName: PowerShell Core on macOS
      imageName: macOS-latest

- stage: Release
  displayName: Release Package
  condition: and(and(succeeded(), eq(variables['Build.Reason'], 'Manual')), eq(variables['Publish'], 'True'))
  jobs:
  - template: release.yml
