#################################################################################
#                               OneBranch Pipelines                             #
# This pipeline was created by EasyStart from a sample located at:              #
#   https://aka.ms/obpipelines/easystart/samples                                #
# Documentation:  https://aka.ms/obpipelines                                    #
# Yaml Schema:    https://aka.ms/obpipelines/yaml/schema                        #
# Retail Tasks:   https://aka.ms/obpipelines/tasks                              #
# Support:        https://aka.ms/onebranchsup                                   #
#################################################################################

trigger:
- main

schedules:
- cron: '40 18 * * 2'
  displayName: Weekly CodeQL
  branches:
    include:
    - main
  always: true

parameters:
- name: debug
  displayName: Enable debug output
  type: boolean
  default: false

variables:
- name: system.debug
  value: ${{ parameters.debug }}
- name: BuildConfiguration
  value: Release
- name: WindowsContainerImage
  value: onebranch.azurecr.io/windows/ltsc2022/vse2022:latest
- name: DOTNET_NOLOGO
  value: true
- name: DOTNET_GENERATE_ASPNET_CERTIFICATE
  value: false
- group: SecretManagementAcr

resources:
  repositories:
    - repository: templates
      type: git
      name: OneBranch.Pipelines/GovernedTemplates
      ref: refs/heads/main

extends:
  # https://aka.ms/obpipelines/templates
  template: v2/OneBranch.Official.CrossPlat.yml@templates
  parameters:
    globalSdl: # https://aka.ms/obpipelines/sdl
      asyncSdl:
        enabled: true
        forStages: [build]
    featureFlags:
      EnableCDPxPAT: false
      WindowsHostVersion:
        Version: 2022
        Network: Netlock
    stages:
    - stage: build
      jobs:
      - job: main
        displayName: Build package
        pool:
          type: windows
        variables:
          ob_outputDirectory: $(Build.SourcesDirectory)/out
        steps:
          - pwsh: |
              [xml]$xml = Get-Content Directory.Build.props
              $version = $xml.Project.PropertyGroup.ModuleVersion
              Write-Output "##vso[task.setvariable variable=version;isOutput=true]$version"
            name: package
            displayName: Get version from project properties
          - task: onebranch.pipeline.version@1
            displayName: Set OneBranch version
            inputs:
              system: Custom
              customVersion: $(package.version)
          - task: UseDotNet@2
            displayName: Use .NET SDK
            inputs:
              packageType: sdk
              useGlobalJson: true
          - pwsh: ./tools/installPSResources.ps1 -PSRepository CFS
            displayName: Install PSResources
          - pwsh: Invoke-Build -Configuration $(BuildConfiguration) -Task Build, Test
            displayName: Build
          - task: onebranch.pipeline.signing@1
            displayName: Sign 1st-party files in module
            inputs:
              command: sign
              signing_profile: external_distribution
              search_root: $(Build.SourcesDirectory)/module
              files_to_sign: |
                Microsoft.*.dll;
                Microsoft.*.psd1;
                Microsoft.*.ps1xml;
          - task: onebranch.pipeline.signing@1
            displayName: Sign 1st-party files in library
            inputs:
              command: sign
              signing_profile: external_distribution
              search_root: $(Build.SourcesDirectory)/artifacts
              files_to_sign: |
                publish/**/Microsoft.PowerShell.SecretManagement.dll;
                refs/**/Microsoft.PowerShell.SecretManagement.dll;
          - task: ArchiveFiles@2
            displayName: Zip module
            inputs:
              rootFolderOrFile: $(Build.SourcesDirectory)/module
              includeRootFolder: false
              archiveType: zip
              archiveFile: out/SecretManagement-v$(package.version).zip
          - pwsh: Invoke-Build -Configuration $(BuildConfiguration) Package
            displayName: Package module
          - task: onebranch.pipeline.signing@1
            displayName: Sign NuGet package
            inputs:
              command: sign
              signing_profile: external_distribution
              search_root: $(Build.SourcesDirectory)/out
              files_to_sign: |
                *.nupkg
    - stage: release
      dependsOn: build
      condition: eq(variables['Build.Reason'], 'Manual')
      variables:
        version: $[ stageDependencies.build.main.outputs['package.version'] ]
        drop: $(Pipeline.Workspace)/drop_build_main
      jobs:
      - job: github
        displayName: Publish draft to GitHub
        pool:
          type: windows
        variables:
          ob_outputDirectory: $(Build.SourcesDirectory)/out
        steps:
        - download: current
          displayName: Download artifacts
        - task: GitHubRelease@1
          displayName: Create GitHub release
          inputs:
            gitHubConnection: GitHub
            repositoryName: PowerShell/SecretManagement
            assets: |
              $(drop)/Microsoft.PowerShell.SecretManagement.$(version).nupkg
              $(drop)/Microsoft.PowerShell.SecretManagement.Library.$(version).nupkg
              $(drop)/SecretManagement-v$(version).zip
            tagSource: userSpecifiedTag
            tag: v$(version)
            isDraft: true
            addChangeLog: false
            releaseNotesSource: inline
            releaseNotesInline: "<!-- TODO: Generate release notes on GitHub! -->"
      - job: validation
        displayName: Manual validation
        pool:
          type: agentless
        timeoutInMinutes: 1440
        steps:
        - task: ManualValidation@0
          displayName: Wait 24 hours for validation
          inputs:
            notifyUsers: $(Build.RequestedForEmail)
            instructions: Please validate the release and then publish it!
            timeoutInMinutes: 1440
      - job: publish
        dependsOn: validation
        displayName: Publish to PowerShell Gallery
        pool:
          type: windows
        variables:
          ob_outputDirectory: $(Build.SourcesDirectory)/out
        steps:
        - download: current
          displayName: Download artifacts
        - task: NuGetCommand@2
          displayName: Publish module to PowerShell Gallery
          inputs:
            command: push
            packagesToPush: $(drop)/Microsoft.PowerShell.SecretManagement.$(version).nupkg
            nuGetFeedType: external
            publishFeedCredentials: PowerShellGallery
        - task: NuGetCommand@2
          displayName: Publish library to NuGet
          inputs:
            command: push
            packagesToPush: $(drop)/Microsoft.PowerShell.SecretManagement.Library.$(version).nupkg
            nuGetFeedType: external
            publishFeedCredentials: PowerShellNuGetOrgPush
    - stage: PrepForEv2
      condition: ne(variables['Build.Reason'], 'Schedule')
      dependsOn: build
      variables:
        drop: $(Pipeline.Workspace)/drop_build_main
        version: $[ stageDependencies.build.main.outputs['package.version'] ]
      jobs:
      - job: CopyEv2FilesToArtifact
        displayName: Copy Ev2 Files To Artifact
        variables:
        - name: ob_outputDirectory
          value: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
        pool:
          timeoutInMinutes: 30
          type: windows
        steps:  
        - task: onebranch.pipeline.signing@1
          displayName: Sign 1st Party Files
          inputs:
            command: 'sign'
            signing_profile: external_distribution
            files_to_sign: '**\*.ps1'
            search_root: '$(Build.SourcesDirectory)/EV2Specs/ServiceGroupRoot/Shell'
        - download: current
          displayName: Download artifacts
        - task: CopyFiles@2
            SourceFolder: $(drop)
            Contents: Microsoft.PowerShell.SecretManagement.$(version).nupkg
            TargetFolder: $(Build.SourcesDirectory)/EV2Specs/ServiceGroupRoot/SrcFiles/
        - task: ArchiveFiles@2
          inputs:
            rootFolderOrFile: $(Build.SourcesDirectory)/EV2Specs/ServiceGroupRoot/Shell/Run
            includeRootFolder: false
            archiveType: tar
            tarCompression: None
            archiveFile: $(Build.SourcesDirectory)/EV2Specs/ServiceGroupRoot/Shell/Run.tar
          displayName: Compress Run script into tar file as needed for EV2 Shell extension           
        - pwsh: |
            $pathToJsonFile = Join-Path -Path '$(Build.SourcesDirectory)/EV2Specs/ServiceGroupRoot' -ChildPath 'SecretManagementToACR.Rollout.json'
            $content = Get-Content -Path $pathToJsonFile | ConvertFrom-Json
            $envVarArrayLen = $content.shellExtensions.launch.environmentVariables.Length

            [xml]$xml = Get-Content Directory.Build.props
            $version = $xml.Project.PropertyGroup.ModuleVersion

            for ($i=0; $i -lt $envVarArrayLen; $i++)
            {
              $name = $($content.shellExtensions.launch.environmentVariables[$i].name)
              if ($name -eq "DESTINATION_ACR_NAME")
              {
                $content.shellExtensions.launch.environmentVariables[$i].value = '$(acr_name)'
                Write-Verbose -Verbose "ACR Name: $($content.shellExtensions.launch.environmentVariables[$i].value)"
              }
              elseif ($name -eq "DESTINATION_ACR_URI")
              {
                $content.shellExtensions.launch.environmentVariables[$i].value = '$(acr_uri)'
                Write-Verbose -Verbose "ACR URI: $($content.shellExtensions.launch.environmentVariables[$i].value)"
              }
              elseif ($name -eq "MI_NAME")
              {
                $content.shellExtensions.launch.environmentVariables[$i].value = '$(managed_identity_name)'
                Write-Verbose -Verbose "MI Name: $($content.shellExtensions.launch.environmentVariables[$i].value)"
              }
              elseif ($name -eq "MI_CLIENTID")
              {
                $content.shellExtensions.launch.environmentVariables[$i].value = '$(managed_identity_clientid)'
                Write-Verbose -Verbose "MI Client ID: $($content.shellExtensions.launch.environmentVariables[$i].value)"
              } 
              elseif($name -eq "SECRET_MANAGEMENT_VERSION") 
              {
                $content.shellExtensions.launch.environmentVariables[$i].value = $version
                Write-Verbose -Verbose "Module version: $($content.shellExtensions.launch.environmentVariables[$i].value)"
              }
              elseif($name -eq "SECRET_MANAGEMENT_MODULE") 
              {
                $content.shellExtensions.launch.environmentVariables[$i].reference.path = "SrcFiles\\Microsoft.PowerShell.SecretManagement.$(version).nupkg"
                Write-Verbose -Verbose "Module Path: $($content.shellExtensions.launch.environmentVariables[$i].reference.path)"
              }
            }

            $identityString = "/subscriptions/$(acr_subscription)/resourcegroups/$(acr_resource_group)/providers/Microsoft.ManagedIdentity/userAssignedIdentities/$(managed_identity_name)" 
            $content.shellExtensions.launch.identity.userAssignedIdentities[0] = $identityString

            Remove-Item -Path $pathToJsonFile
            $content | ConvertTo-Json -Depth 6 | Out-File $pathToJsonFile

          displayName: 'Replace values in SecretManagementToACR.Rollout.json file'
        - pwsh: |
            $pathToJsonFile = Join-Path -Path '$(Build.SourcesDirectory)/EV2Specs/ServiceGroupRoot' -ChildPath 'RolloutSpec.json'
            $content = Get-Content -Path $pathToJsonFile | ConvertFrom-Json
            $content.RolloutMetadata.Notification.Email.To = '$(email_address)'

            Remove-Item -Path $pathToJsonFile
            $content | ConvertTo-Json -Depth 4 | Out-File $pathToJsonFile

          displayName: 'Replace values in RolloutSpecPath.json'
        - pwsh: |
            $pathToJsonFile = Join-Path -Path '$(Build.SourcesDirectory)/EV2Specs/ServiceGroupRoot' -ChildPath 'ServiceModel.json'
            $content = Get-Content -Path $pathToJsonFile | ConvertFrom-Json
            $content.ServiceResourceGroups[0].AzureResourceGroupName = '$(acr_resource_group)'
            $content.ServiceResourceGroups[0].AzureSubscriptionId = '$(acr_subscription)'

            Remove-Item -Path $pathToJsonFile
            $content | ConvertTo-Json -Depth 9 | Out-File $pathToJsonFile

          displayName: 'Replace values in ServiceModel.json'
        - task: CopyFiles@2
          inputs:
            Contents: 'EV2Specs/**'
            TargetFolder: $(ob_outputDirectory)
    - stage:  'Prod_release'
      displayName: Deploy Images to ACR with EV2
      dependsOn:
      - PrepForEV2
      variables:
        - name: ob_release_environment
          value: "Production"
        - name: repoRoot
          value: $(Build.SourcesDirectory)
      jobs:
      - job: Prod_ReleaseJob
        pool:
          type: release
        steps:
          - download: current
            displayName: Download artifacts
          - task: vsrm-ev2.vss-services-ev2.adm-release-task.ExpressV2Internal@1
            displayName: 'Ev2: Push to ACR'
            inputs:
              UseServerMonitorTask: true
              EndpointProviderType: ApprovalService
              ApprovalServiceEnvironment: Production
              ServiceRootPath: '$(Pipeline.Workspace)/drop_PrepForEV2_CopyEv2FilesToArtifact/EV2Specs/ServiceGroupRoot'
              RolloutSpecPath: '$(Pipeline.Workspace)/drop_PrepForEV2_CopyEv2FilesToArtifact/EV2Specs/ServiceGroupRoot/RolloutSpec.json'    
